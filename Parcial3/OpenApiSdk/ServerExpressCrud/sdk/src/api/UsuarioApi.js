/**
 * API Usuarios
 * Documentación de la API de Usuarios
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: alejandromonsivais367@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Usuario from '../model/Usuario';
import UsuarioGet200Response from '../model/UsuarioGet200Response';
import UsuarioInput from '../model/UsuarioInput';

/**
* Usuario service.
* @module api/UsuarioApi
* @version 1.0.0
*/
export default class UsuarioApi {

    /**
    * Constructs a new UsuarioApi. 
    * @alias module:api/UsuarioApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the usuarioDelete operation.
     * @callback module:api/UsuarioApi~usuarioDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Elimina un usuario
     * Elimina un usuario específico por ID
     * @param {Number} usuarioId ID del usuario a eliminar
     * @param {module:api/UsuarioApi~usuarioDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    usuarioDelete(usuarioId, callback) {
      let postBody = null;
      // verify the required parameter 'usuarioId' is set
      if (usuarioId === undefined || usuarioId === null) {
        throw new Error("Missing the required parameter 'usuarioId' when calling usuarioDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'usuario_id': usuarioId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/usuario', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usuarioGet operation.
     * @callback module:api/UsuarioApi~usuarioGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsuarioGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Consulta usuario(s)
     * Obtiene un usuario específico por ID o lista todos los usuarios si no se proporciona ID
     * @param {Object} opts Optional parameters
     * @param {Number} [usuarioId] ID del usuario a buscar (opcional)
     * @param {module:api/UsuarioApi~usuarioGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsuarioGet200Response}
     */
    usuarioGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'usuario_id': opts['usuarioId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsuarioGet200Response;
      return this.apiClient.callApi(
        '/usuario', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usuarioPost operation.
     * @callback module:api/UsuarioApi~usuarioPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Usuario} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Crea un nuevo usuario
     * Registra un nuevo usuario en el sistema
     * @param {module:model/UsuarioInput} usuarioInput 
     * @param {module:api/UsuarioApi~usuarioPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Usuario}
     */
    usuarioPost(usuarioInput, callback) {
      let postBody = usuarioInput;
      // verify the required parameter 'usuarioInput' is set
      if (usuarioInput === undefined || usuarioInput === null) {
        throw new Error("Missing the required parameter 'usuarioInput' when calling usuarioPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Usuario;
      return this.apiClient.callApi(
        '/usuario', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
